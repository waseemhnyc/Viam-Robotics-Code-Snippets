{
    "_vcmovementsensor": {
        "prefix": "_vcmovementsensor",
        "body": [
            "my_movement_sensor = MovementSensor.from_robot(",
            "    robot=robot, name=\"my_movement_sensor\"",
            ")"
        ],
        "description": "Initializes a Movement Sensor object from a given robot instance."
    },
    "_vcsensor": {
        "prefix": "_vcsensor",
        "body": [
            "my_sensor = Sensor.from_robot(robot=robot, name='my_sensor')"
        ],
        "description": "Initializes a Sensor object from a given robot instance."
    },
    "_vcgeneric": {
        "prefix": "_vcgeneric",
        "body": [
            "my_generic = Generic.from_robot(robot=robot, name=\"my_generic_component\")"
        ],
        "description": "Initializes a Generic object from a given robot instance."
    },
    "_vtconnect": {
        "prefix": "_vtconnect",
        "body": [
            "from viam.robot.client import RobotClient",
            "from viam.rpc.dial import Credentials, DialOptions",
            "",
            "",
            "async def connect(host, payload, channel=False):",
            "    creds = Credentials(",
            "        type='robot-location-secret',",
            "        payload=payload",
            "    )",
            "    opts = RobotClient.Options(",
            "        refresh_interval=0,",
            "        dial_options=DialOptions(credentials=creds)",
            "    )",
            "    if channel:",
            "        await RobotClient.with_channel(host, opts)",
            "    return await RobotClient.at_address(host, opts)"
        ],
        "description": "Establish a connection to a robot with an address or channel."
    },
    "_vcboard": {
        "prefix": "_vcboard",
        "body": [
            "my_board = Board.from_robot(robot=robot, name=\"my_board\")"
        ],
        "description": "Initializes a Board object from a given robot instance."
    },
    "_vcservo": {
        "prefix": "_vcservo",
        "body": [
            "my_servo = Servo.from_robot(robot=robot, name=\"my_servo\")"
        ],
        "description": "Initializes a Servo object from a given robot instance"
    },
    "_vtmain": {
        "prefix": "_vtmain",
        "body": [
            "import asyncio",
            "",
            "from viam.robot.client import RobotClient",
            "from viam.rpc.dial import Credentials, DialOptions",
            "",
            "",
            "async def connect(host, payload, channel=False):",
            "    creds = Credentials(",
            "        type='robot-location-secret',",
            "        payload=payload",
            "    )",
            "    opts = RobotClient.Options(",
            "        refresh_interval=0,",
            "        dial_options=DialOptions(credentials=creds)",
            "    )",
            "    if channel:",
            "        await RobotClient.with_channel(host, opts)",
            "    return await RobotClient.at_address(host, opts)",
            "",
            "",
            "async def main():",
            "    robot = await connect('ADDRESS', 'SECRET')",
            "",
            "    # do stuff here",
            "",
            "    await robot.close()",
            "",
            "if __name__ == '__main__':",
            "    asyncio.run(main())"
        ],
        "description": "Template that establishes a connection to a robot with a main async event loop."
    },
    "_vcgantry": {
        "prefix": "_vcgantry",
        "body": [
            "my_gantry = Gantry.from_robot(robot=robot, name=\"my_gantry\")"
        ],
        "description": "Initializes a Gantry object from a given robot instance."
    },
    "_vcpowersensor": {
        "prefix": "_vcpowersensor",
        "body": [
            "my_power_sensor = PowerSensor.from_robot(robot=robot, name=\"my_power_sensor\")"
        ],
        "description": "Initializes a Power Sensor object from a given robot instance."
    },
    "_vcbase": {
        "prefix": "_vcbase",
        "body": [
            "my_base = Base.from_robot(robot=robot, name=\"my_base\")"
        ],
        "description": "Initializes a Base object from a given robot instance."
    },
    "_vcmotor": {
        "prefix": "_vcmotor",
        "body": [
            "my_motor = Motor.from_robot(robot=robot, name=\"my_motor\")"
        ],
        "description": "Initializes a Motor object from a given robot instance."
    },
    "_vcarm": {
        "prefix": "_vcarm",
        "body": [
            "my_arm = Arm.from_robot(robot=robot, name=\"my_arm\")"
        ],
        "description": "Initializes an Arm object from a given robot instance."
    },
    "_vccontroller": {
        "prefix": "_vccontroller",
        "body": [
            "from viam.components.input import Control, Controller, EventType",
            "",
            "",
            "async def handle_controller(controller):",
            "    controls = await controller.get_controls()",
            "    events = await controller.get_events()",
            "",
            "my_controller = Controller.from_robot(robot=robot, name=\"my_controller\")",
            "await handleController(my_controller)"
        ],
        "description": "Initializes a Controller object from a given robot instance and handles its controls and events."
    },
    "_vcgripper": {
        "prefix": "_vcgripper",
        "body": [
            "my_gripper = Gripper.from_robot(robot=robot, name=\"my_gripper\")"
        ],
        "description": "Initializes a Gripper object from a given robot instance."
    },
    "_vcencoder": {
        "prefix": "_vcencoder",
        "body": [
            "my_encoder = Encoder.from_robot(robot=robot, name='my_encoder')"
        ],
        "description": "Initializes an Encoder object from a given robot instance."
    },
    "_vccamera": {
        "prefix": "_vccamera",
        "body": [
            "my_camera = Camera.from_robot(robot=robot, name=\"my_camera\")"
        ],
        "description": "Initializes a Camera object from a given robot instance."
    }
}